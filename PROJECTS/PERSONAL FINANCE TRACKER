import json
import os

# File to store the transaction data
DATA_FILE = "finance_data.json"

# Class to represent a single transaction
class Transaction:
    def __init__(self, t_type, amount, category, date):
        self.type = t_type         # "Income" or "Expense"
        self.amount = amount       # Amount of transaction
        self.category = category   # Category like Food, Rent, Salary, etc.
        self.date = date           # Date in YYYY-MM-DD format

    def to_dict(self):
        # Convert the transaction to a dictionary for saving
        return {
            "type": self.type,
            "amount": self.amount,
            "category": self.category,
            "date": self.date
        }

    @staticmethod
    def from_dict(data):
        # Create a Transaction object from a dictionary (when loading data)
        return Transaction(
            t_type=data["type"],
            amount=data["amount"],
            category=data["category"],
            date=data["date"]
        )

# Class to manage the entire finance tracker system
class FinanceTracker:
    def __init__(self):
        self.transactions = []  # List to store all transactions
        self.load_data()        # Load existing data on startup

    def load_data(self):
        # Load transactions from the JSON file if it exists
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, "r") as file:
                data = json.load(file)
                self.transactions = [Transaction.from_dict(t) for t in data]

    def save_data(self):
        # Save all current transactions to the JSON file
        with open(DATA_FILE, "w") as file:
            json.dump([t.to_dict() for t in self.transactions], file, indent=4)

    def add_transaction(self):
        # Get user input to create a new transaction
        t_type = input("Enter type (Income/Expense): ").capitalize()
        amount = float(input("Enter amount: "))
        category = input("Enter category (e.g., Food, Salary, Rent): ")
        date = input("Enter date (YYYY-MM-DD): ")

        new_transaction = Transaction(t_type, amount, category, date)
        self.transactions.append(new_transaction)  # Add to the list
        print("âœ… Transaction added successfully!")
        self.save_data()  # Save the new state

    def view_transactions(self):
        # Display all transactions
        if not self.transactions:
            print("No transactions found.")
            return
        print("\n--- All Transactions ---")
        for i, t in enumerate(self.transactions, 1):
            print(f"{i}. {t.date} | {t.type} | ${t.amount} | {t.category}")

    def filter_expenses_over_100(self):
        # Show only expenses greater than $100
        print("\n--- Expenses over $100 ---")
        for t in self.transactions:
            if t.type == "Expense" and t.amount > 100:
                print(f"{t.date} | ${t.amount} | {t.category}")

    def search_by_category(self):
        # Search and show transactions in a specific category
        cat = input("Enter category to search: ")
        print(f"\n--- Transactions in {cat} ---")
        for t in self.transactions:
            if t.category.lower() == cat.lower():
                print(f"{t.date} | {t.type} | ${t.amount}")

    def sort_by_amount(self):
        # Sort transactions by amount in descending order
        sorted_transactions = sorted(self.transactions, key=lambda x: x.amount, reverse=True)
        print("\n--- Transactions Sorted by Amount ---")
        for t in sorted_transactions:
            print(f"{t.date} | {t.type} | ${t.amount} | {t.category}")

    def monthly_spending_chart(self):
        # Generate a simple ASCII chart showing monthly expenses
        monthly_totals = {}
        for t in self.transactions:
            if t.type == "Expense":
                month = t.date[:7]  # Extract YYYY-MM from date
                monthly_totals[month] = monthly_totals.get(month, 0) + t.amount

        print("\n--- Monthly Spending Chart ---")
        for month, total in monthly_totals.items():
            bars = "#" * int(total // 10)  # One # per $10
            print(f"{month}: {bars} (${total})")

# Main menu function
def main():
    tracker = FinanceTracker()  # Initialize tracker

    while True:
        # Show menu options
        print("\n==== Personal Finance Tracker ====")
        print("1. Add Transaction")
        print("2. View All Transactions")
        print("3. Filter Expenses over $100")
        print("4. Search by Category")
        print("5. Sort by Amount")
        print("6. Show Monthly Spending Chart")
        print("7. Exit")

        # Get user choice
        choice = input("Choose an option: ")

        # Handle each menu option
        if choice == "1":
            tracker.add_transaction()
        elif choice == "2":
            tracker.view_transactions()
        elif choice == "3":
            tracker.filter_expenses_over_100()
        elif choice == "4":
            tracker.search_by_category()
        elif choice == "5":
            tracker.sort_by_amount()
        elif choice == "6":
            tracker.monthly_spending_chart()
        elif choice == "7":
            print("Exiting... Data saved.")
            tracker.save_data()
            break
        else:
            print("Invalid choice, try again.")

# Entry point of the program
if __name__ == "__main__":
    main()
